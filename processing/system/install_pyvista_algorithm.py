# -*- coding: utf-8 -*-

"""
/***************************************************************************
 3DToolbox
                                 A QGIS plugin
 This plugin provides tools and functions for 3D geometries and volumes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-11
        copyright            : (C) 2021 by 3D geoinformation group
        email                : steliosvitalis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = '3D geoinformation group'
__date__ = '2021-08-11'
__copyright__ = '(C) 2021 by 3D geoinformation group'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import subprocess
import sys

from PyQt5.QtCore import QVariant
from qgis.core import (QgsFeature, QgsFeatureRequest, QgsFeatureSink, QgsField,
                       QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource)
from qgis.PyQt.QtCore import QCoreApplication

def install_package(package_name, site_path):
    python_exec = os.path.join(sys.prefix, "bin", "python3")

    return subprocess.check_output([python_exec, "-m", "pip", "install", "--platform", "macosx_10_14_x86_64", "--target", site_path, "--only-binary=:all:", package_name])

class InstallPyvistaAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        pass

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        try:
            import ptvsd
            ptvsd.debug_this_thread()
        except:
            pass

        python_exec = os.path.join(sys.prefix, "bin", "python3")
        site_path = os.path.join(sys.prefix, "..", "Resources/python/site-packages")

        print(subprocess.check_output([python_exec, "-m", "pip", "install", "transforms3d"]))

        print(install_package("vtk", site_path))
        print(install_package("meshio", site_path))
        print(install_package("scooby", site_path))

        print(subprocess.check_output([python_exec, "-m", "pip", "install","--no-deps", "pyvista"]))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: "DONE"}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Install pyvista'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'System'

    def shortHelpString(self):
        """Returns help string for the algorithm's UI"""
        return """Pyvista is missing. Use this to install."""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return InstallPyvistaAlgorithm()
